// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/notice/notice.proto

package notice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNoticeReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNoticeReq) Reset()         { *m = GetNoticeReq{} }
func (m *GetNoticeReq) String() string { return proto.CompactTextString(m) }
func (*GetNoticeReq) ProtoMessage()    {}
func (*GetNoticeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86ebcd03455ab600, []int{0}
}

func (m *GetNoticeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNoticeReq.Unmarshal(m, b)
}
func (m *GetNoticeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNoticeReq.Marshal(b, m, deterministic)
}
func (m *GetNoticeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNoticeReq.Merge(m, src)
}
func (m *GetNoticeReq) XXX_Size() int {
	return xxx_messageInfo_GetNoticeReq.Size(m)
}
func (m *GetNoticeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNoticeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetNoticeReq proto.InternalMessageInfo

func (m *GetNoticeReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetNoticeResp struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status               string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNoticeResp) Reset()         { *m = GetNoticeResp{} }
func (m *GetNoticeResp) String() string { return proto.CompactTextString(m) }
func (*GetNoticeResp) ProtoMessage()    {}
func (*GetNoticeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86ebcd03455ab600, []int{1}
}

func (m *GetNoticeResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNoticeResp.Unmarshal(m, b)
}
func (m *GetNoticeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNoticeResp.Marshal(b, m, deterministic)
}
func (m *GetNoticeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNoticeResp.Merge(m, src)
}
func (m *GetNoticeResp) XXX_Size() int {
	return xxx_messageInfo_GetNoticeResp.Size(m)
}
func (m *GetNoticeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNoticeResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetNoticeResp proto.InternalMessageInfo

func (m *GetNoticeResp) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetNoticeResp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetNoticeResp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GetNoticeResp) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetNoticeResp) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetNoticeResp) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

//拒绝邀请
type ReadReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadReq) Reset()         { *m = ReadReq{} }
func (m *ReadReq) String() string { return proto.CompactTextString(m) }
func (*ReadReq) ProtoMessage()    {}
func (*ReadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_86ebcd03455ab600, []int{2}
}

func (m *ReadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadReq.Unmarshal(m, b)
}
func (m *ReadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadReq.Marshal(b, m, deterministic)
}
func (m *ReadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadReq.Merge(m, src)
}
func (m *ReadReq) XXX_Size() int {
	return xxx_messageInfo_ReadReq.Size(m)
}
func (m *ReadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReadReq proto.InternalMessageInfo

func (m *ReadReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ReadResp struct {
	Date                 string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadResp) Reset()         { *m = ReadResp{} }
func (m *ReadResp) String() string { return proto.CompactTextString(m) }
func (*ReadResp) ProtoMessage()    {}
func (*ReadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_86ebcd03455ab600, []int{3}
}

func (m *ReadResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadResp.Unmarshal(m, b)
}
func (m *ReadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadResp.Marshal(b, m, deterministic)
}
func (m *ReadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResp.Merge(m, src)
}
func (m *ReadResp) XXX_Size() int {
	return xxx_messageInfo_ReadResp.Size(m)
}
func (m *ReadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResp proto.InternalMessageInfo

func (m *ReadResp) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *ReadResp) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*GetNoticeReq)(nil), "partner.GetNoticeReq")
	proto.RegisterType((*GetNoticeResp)(nil), "partner.GetNoticeResp")
	proto.RegisterType((*ReadReq)(nil), "partner.ReadReq")
	proto.RegisterType((*ReadResp)(nil), "partner.ReadResp")
}

func init() { proto.RegisterFile("proto/notice/notice.proto", fileDescriptor_86ebcd03455ab600) }

var fileDescriptor_86ebcd03455ab600 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0x9d, 0xce, 0xd6, 0x7d, 0x6c, 0xa0, 0x1f, 0x38, 0xeb, 0x40, 0x90, 0x7a, 0x70, 0x08,
	0x6b, 0x41, 0xaf, 0x5e, 0xe6, 0x0e, 0xe2, 0x41, 0x85, 0x1e, 0xbd, 0x8c, 0x2c, 0xfd, 0x98, 0x3b,
	0xb4, 0x89, 0xc9, 0xd7, 0x83, 0xff, 0x93, 0x7f, 0xa4, 0x34, 0xc9, 0x46, 0x11, 0xf5, 0xd4, 0xbc,
	0xdf, 0x7b, 0xd0, 0x97, 0x17, 0x38, 0xd7, 0x46, 0xb1, 0xca, 0x6b, 0xc5, 0x1b, 0x49, 0xe1, 0x93,
	0x39, 0x86, 0xb1, 0x16, 0x86, 0x6b, 0x32, 0xe9, 0x35, 0x0c, 0x1f, 0x89, 0x5f, 0x9c, 0x57, 0xd0,
	0x07, 0x9e, 0x41, 0xdc, 0x58, 0x32, 0xcb, 0x4d, 0x99, 0xf4, 0x2e, 0x7b, 0xd3, 0x41, 0x11, 0xb5,
	0xf2, 0xa9, 0x4c, 0xbf, 0x7a, 0x30, 0xea, 0x24, 0xad, 0xfe, 0x33, 0x8a, 0x08, 0x7d, 0xfe, 0xd4,
	0x94, 0xec, 0x3b, 0xea, 0xce, 0x98, 0x40, 0x2c, 0x55, 0xcd, 0x54, 0x73, 0x72, 0xe0, 0xf0, 0x56,
	0xe2, 0x05, 0x40, 0xa3, 0x4b, 0xc1, 0x54, 0x2e, 0x05, 0x27, 0x7d, 0x67, 0x0e, 0x02, 0x99, 0x3b,
	0x5b, 0x1a, 0xda, 0xda, 0x87, 0xde, 0x0e, 0x64, 0xce, 0x38, 0x86, 0xc8, 0xb2, 0xe0, 0xc6, 0x26,
	0x91, 0xef, 0xe0, 0x55, 0x9a, 0x42, 0x5c, 0x90, 0x28, 0xff, 0xbd, 0xd2, 0x02, 0x8e, 0x7c, 0xc6,
	0xea, 0xb6, 0x73, 0xfb, 0xc7, 0x90, 0x70, 0x67, 0xbc, 0x82, 0x11, 0x19, 0xa3, 0xcc, 0xb2, 0x22,
	0x6b, 0xc5, 0x7a, 0x7b, 0xa1, 0xa1, 0x83, 0xcf, 0x9e, 0xdd, 0x36, 0x10, 0xf9, 0x4d, 0xf0, 0x1e,
	0x06, 0xbb, 0x81, 0xf0, 0x34, 0x0b, 0x0b, 0x67, 0xdd, 0x79, 0x27, 0xe3, 0xdf, 0xb0, 0xd5, 0xe9,
	0x1e, 0xce, 0xa0, 0xdf, 0x96, 0xc1, 0xe3, 0x5d, 0x22, 0xf4, 0x9f, 0x9c, 0xfc, 0x20, 0x6d, 0xfc,
	0xe1, 0xe6, 0x6d, 0xba, 0xde, 0xf0, 0x7b, 0xb3, 0xca, 0xa4, 0xaa, 0xf2, 0x45, 0xf1, 0x5a, 0x2c,
	0x8a, 0x5c, 0x9a, 0x99, 0x54, 0x55, 0xa5, 0xea, 0xbc, 0xfb, 0xf2, 0xab, 0xc8, 0xa9, 0xbb, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xa0, 0x94, 0x49, 0x10, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoticeClient interface {
	GetNotice(ctx context.Context, in *GetNoticeReq, opts ...grpc.CallOption) (*GetNoticeResp, error)
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error)
}

type noticeClient struct {
	cc *grpc.ClientConn
}

func NewNoticeClient(cc *grpc.ClientConn) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) GetNotice(ctx context.Context, in *GetNoticeReq, opts ...grpc.CallOption) (*GetNoticeResp, error) {
	out := new(GetNoticeResp)
	err := c.cc.Invoke(ctx, "/partner.Notice/GetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (*ReadResp, error) {
	out := new(ReadResp)
	err := c.cc.Invoke(ctx, "/partner.Notice/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServer is the server API for Notice service.
type NoticeServer interface {
	GetNotice(context.Context, *GetNoticeReq) (*GetNoticeResp, error)
	Read(context.Context, *ReadReq) (*ReadResp, error)
}

// UnimplementedNoticeServer can be embedded to have forward compatible implementations.
type UnimplementedNoticeServer struct {
}

func (*UnimplementedNoticeServer) GetNotice(ctx context.Context, req *GetNoticeReq) (*GetNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (*UnimplementedNoticeServer) Read(ctx context.Context, req *ReadReq) (*ReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

func RegisterNoticeServer(s *grpc.Server, srv NoticeServer) {
	s.RegisterService(&_Notice_serviceDesc, srv)
}

func _Notice_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.Notice/GetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).GetNotice(ctx, req.(*GetNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partner.Notice/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).Read(ctx, req.(*ReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "partner.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotice",
			Handler:    _Notice_GetNotice_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Notice_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notice/notice.proto",
}
